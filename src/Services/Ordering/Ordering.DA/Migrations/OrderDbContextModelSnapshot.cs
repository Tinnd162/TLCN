// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ordering.DA.EF;

namespace Ordering.DA.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ordering.DA.Entities.Delivery", b =>
                {
                    b.Property<Guid>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryID");

                    b.ToTable("Deivery");

                    b.HasData(
                        new
                        {
                            DeliveryID = new Guid("9c8389da-3a06-40e0-a17b-aefa996d4ce6"),
                            Address = "123 ABC",
                            CustomerID = new Guid("eec92800-02a2-4f87-91b5-dd5f03a5d9d8"),
                            Email = "asd@gmail.com",
                            FirstNameReceiver = "Viet",
                            LastNameReceiver = "Lam",
                            PhoneNo = "0123213"
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderID = new Guid("135d885d-33ab-48b6-aaf3-c3468d49dca4"),
                            CustomerID = new Guid("eec92800-02a2-4f87-91b5-dd5f03a5d9d8"),
                            DeliveryID = new Guid("9c8389da-3a06-40e0-a17b-aefa996d4ce6"),
                            IsDelete = false,
                            OrderDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentID = new Guid("4ccb9f59-4452-46c1-9ea0-38893a7a07bd"),
                            StaffID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TotalAmount = 100000.0
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IMEI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<double>("VAT")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            OrderDetailID = new Guid("d2930de6-a1cc-42ce-b0bc-4a59e3e1b054"),
                            IMEI = "312312321312",
                            OrderID = new Guid("135d885d-33ab-48b6-aaf3-c3468d49dca4"),
                            ProductName = "Itel 33",
                            Quantity = 1,
                            SalePrice = 50000.0,
                            VAT = 0.10000000000000001
                        },
                        new
                        {
                            OrderDetailID = new Guid("0a307435-8605-46ee-a01b-66fc4b6ba6c3"),
                            OrderID = new Guid("135d885d-33ab-48b6-aaf3-c3468d49dca4"),
                            ProductName = "Tai nghe Sony",
                            Quantity = 1,
                            SalePrice = 50000.0,
                            VAT = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentID = new Guid("4ccb9f59-4452-46c1-9ea0-38893a7a07bd"),
                            CVV = "123",
                            CardName = "ABC",
                            CardNo = "1221313",
                            Expiration = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = ""
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.HasOne("Ordering.DA.Entities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordering.DA.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Ordering.DA.Entities.OrderDetail", b =>
                {
                    b.HasOne("Ordering.DA.Entities.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
