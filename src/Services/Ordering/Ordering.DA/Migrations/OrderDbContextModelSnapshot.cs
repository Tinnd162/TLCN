// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ordering.DA.EF;

namespace Ordering.DA.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ordering.DA.Entities.Delivery", b =>
                {
                    b.Property<string>("DeliveryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryID");

                    b.ToTable("Deivery");

                    b.HasData(
                        new
                        {
                            DeliveryID = "3505cd98-075c-4285-a1cb-9ad17a307005",
                            Address = "123 ABC",
                            CustomerID = "d7f522e1-a49e-4e98-a834-4b0b7aadd82a",
                            Email = "asd@gmail.com",
                            FirstNameReceiver = "Viet",
                            LastNameReceiver = "Lam",
                            PhoneNo = "0123213"
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("PaymentID");

                    b.ToTable("SaleOrder");

                    b.HasData(
                        new
                        {
                            OrderID = "18d259f2-3171-4d33-86ab-03de0cc6339e",
                            CustomerID = "d7f522e1-a49e-4e98-a834-4b0b7aadd82a",
                            CustomerName = "Viet",
                            DeliveryID = "3505cd98-075c-4285-a1cb-9ad17a307005",
                            Gender = 0,
                            IsDelete = false,
                            OrderDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentID = "8d5ef6ed-1b0b-41cb-bd2b-8e759436ff36",
                            TotalAmount = 100000.0
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IMEI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<double>("VAT")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.ToTable("SaleOrderDetail");

                    b.HasData(
                        new
                        {
                            OrderDetailID = "385df4f6-94d7-49f1-b38b-fd7d4476fb75",
                            IMEI = "312312321312",
                            OrderID = "18d259f2-3171-4d33-86ab-03de0cc6339e",
                            ProductName = "Itel 33",
                            Quantity = 1,
                            SalePrice = 50000.0,
                            VAT = 0.10000000000000001
                        },
                        new
                        {
                            OrderDetailID = "7574cd23-8448-4a19-a7db-8b3893e0f7d1",
                            OrderID = "18d259f2-3171-4d33-86ab-03de0cc6339e",
                            ProductName = "Tai nghe Sony",
                            Quantity = 1,
                            SalePrice = 50000.0,
                            VAT = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentID = "8d5ef6ed-1b0b-41cb-bd2b-8e759436ff36",
                            CVV = "123",
                            CardName = "ABC",
                            CardNo = "1221313",
                            CustomerID = "d7f522e1-a49e-4e98-a834-4b0b7aadd82a",
                            Expiration = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = ""
                        });
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.HasOne("Ordering.DA.Entities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordering.DA.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Ordering.DA.Entities.OrderDetail", b =>
                {
                    b.HasOne("Ordering.DA.Entities.Order", "Orders")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Delivery", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Ordering.DA.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
